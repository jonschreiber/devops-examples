version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash
env:
  # these are local variables to the build config
  variables:
    DOCKER_CLI_EXPERIMENTAL: "enabled"
    DOCKER_BUILDKIT: 1

  # the value of a vaultVariable is the secret-id (in OCI ID format) stored in the OCI Vault service
  # you can then access the value of that secret in your build_spec.yaml commands
  vaultVariables:
    OCIR_DOCKER_USER: "<OCID-SECRET-FOR-YOUR-DOCKER-USER>"
    OCIR_DOCKER_PWD: "<OCID-SECRET-FOR-YOUR-DOCKER-PWD>"
  
  # exportedVariables are made available to use as parameters 
  # in sucessor Build Pipeline stages
  # For this Build to run, the Build Pipeline needs to have a BUILDRUN_HASH
  # parameter set
  exportedVariables:
    - BUILDRUN_HASH


steps:
  - type: Command
    name: "Export variables"
    timeoutInSeconds: 40
    command: |
      export BUILDRUN_HASH=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
      echo "BUILDRUN_HASH: " $BUILDRUN_HASH

  - type: Command
    timeoutInSeconds: 600
    name: "Install Prereqs"
    command: |
      cd ${OCI_WORKSPACE_DIR}/node_express
      # install nvm
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      nvm install lts/erbium
      echo "NODE VERSION: $(node -v)"
      echo "NPM VERSION: $(npm -v)"
  
  - type: Command
    timeoutInSeconds: 600
    name: "NPM install (waiting 5 mins)"
    command: |
      cd ${OCI_WORKSPACE_DIR}/node_express
      npm install

  - type: Command
    timeoutInSeconds: 1200
    name: "Run Tests"
    command: |
      cd ${OCI_WORKSPACE_DIR}/node_express
      npm test

  - type: Command
    timeoutInSeconds: 1200
    name: "Docker multi-arch test"
    command: |
      cd ${OCI_WORKSPACE_DIR}/node_express
      # verify the docker version (must by < 19.03)
      docker version

      # download and install buildx
      wget -nv https://github.com/docker/buildx/releases/download/v0.6.3/buildx-v0.6.3.linux-amd64
      mkdir -p ~/.docker/cli-plugins
      mv buildx-v0.6.3.linux-amd64 ~/.docker/cli-plugins/docker-buildx
      chmod a+x ~/.docker/cli-plugins/docker-buildx
      
      # check OS
      uname -a
      
      # setup qemu emulator for docker buildx
      docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      docker buildx create --name mybuilder
      docker buildx use mybuilder
      docker buildx inspect --bootstrap
      docker buildx ls

    onFailure:
      - type: Command
        command: |
          echo "Handling Failure setting up docker buildx"
        timeoutInSeconds: 40
        runAs: root

  - type: Command
    timeoutInSeconds: 1200
    name: "Login to OCI Container Registry"
    command: |
      cd ${OCI_WORKSPACE_DIR}/node_express
      # do docker login
      echo ${OCIR_DOCKER_PWD} | docker login iad.ocir.io -u ${OCIR_DOCKER_USER} --password-stdin

  - type: Command
    timeoutInSeconds: 1200
    name: "Build container image"
    command: |
      cd ${OCI_WORKSPACE_DIR}/node_express
      # multi-architecture manifests can't be exported locally, need to push to a registry
      docker buildx build --platform linux/amd64,linux/arm64 -t iad.ocir.io/odx-pipelines/js-test/node-express-getting-started-multi:${BUILDRUN_HASH} --push -f DOCKERFILE . 
